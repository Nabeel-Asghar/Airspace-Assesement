"use strict";(self.webpackChunkreact_esri_template=self.webpackChunkreact_esri_template||[]).push([[172],{80172:(e,s,t)=>{t.r(s),t.d(s,{default:()=>c}),t(36348);var r=t(42766),o=t(8985),i=t(44464),l=t(9628),n=t(52937);const c=class{async decode(e){const s=await(0,o.Jx)(e.data,e.options);return s&&s.toJSON()}symbolize(e){e.pixelBlock=r.Z.fromJSON(e.pixelBlock),e.extent=e.extent?n.Z.fromJSON(e.extent):null;const s=this.symbolizer.symbolize(e);return Promise.resolve(s&&s.toJSON())}async updateSymbolizer(e){var s;this.symbolizer=l.Z.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===(null==(s=this.symbolizer)?void 0:s.rendererJSON.type)&&(this.symbolizer.rendererJSON.histograms=e.histograms)}stretch(e){const s=this.symbolizer.simpleStretch(r.Z.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(s&&s.toJSON())}estimateStatisticsHistograms(e){const s=(0,i.Hv)(r.Z.fromJSON(e.srcPixelBlock));return Promise.resolve(s)}split(e){const s=(0,i.Vl)(r.Z.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return s&&s.forEach(((e,t)=>{s.set(t,null==e?void 0:e.toJSON())})),Promise.resolve(s)}async mosaicAndTransform(e){const s=e.srcPixelBlocks.map((e=>e?new r.Z(e):null)),t=(0,i.us)(s,e.srcMosaicSize,null,null,e.alignmentInfo);if(!e.coefs)return t&&t.toJSON();const o=(0,i.Uk)(t,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation);return o&&o.toJSON()}}}}]);